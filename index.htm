<!DOCTYPE html>

<html lang="en">
<style>
    body {
        background-image: url('bg.jpg');
    }
</style>

<head>
    <script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js" type="application/javascript"></script>

    <meta charset="UTF-8">
    <title>On-Chain NFT Trees - Ethereum - ERC-721</title>

    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-JL4DV6D31W"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'G-JL4DV6D31W');
    </script>
</head>

<body>
    <h1>On-Chain NFT Trees</h1>
    v 1.3
    <a href="./mobile.htm">Click here for the mobile version</a>

    <h2>The problem with NFTs</h2>
    99.9% of NFTs are pointers to an external resource. <a href="https://moxie.org/2022/01/07/web3-first-impressions.html" target="out">What you own is the pointer, not
        the real data</a>: only the smart contract can be trusted!
    <br />
    Projects like <a href="https://www.larvalabs.com/blog/2021-8-18-18-0/on-chain-cryptopunks" target="out">Cryptopunks</a> and
    <a href="https://onchainmonkey.com/" target="out">Onchainmonkey</a> are <b>real</b> NFTs because the code is in the
    contract code that
    you own, therefore you own the generated art.
    <br />
    The trees below are generated by a <a href="https://etherscan.io/address/0xd5c8b72ce5f9b7d03d29f14b3802fcc1d4f06968" target="out">smart
        contract</a>.
    <br />
    You own more than a pointer, you own the real thing.

    <h2>Buy those trees and <b>20%</b> of the purchase goes to <a href="https://lp.unicef.fr/donate-in-cryptocurrencies-addresses/" target="out">UNICEF</a></h2>
    Once you own a tree, it is yours. No reseller fee. Once owned you can go to <a href="https://opensea.io/" target="out">OpenSea</a>, see your NFT and trade it at will.
    <br /><br />
    Each withdrawal on the smart contract will send <b>20%</b> of the sale to the <a href="https://lp.unicef.fr/donate-in-cryptocurrencies-addresses/" target="out">UNICEF</a> ETH <a
        href="https://etherscan.io/address/0xa59b29d7dbc9794d1e7f45123c48b2b8d0a34636" target="out">0xa59b29d7dbc9794d1e7f45123c48b2b8d0a34636</a> address.
    <br />
    Note the <b>uniceffrance.eth</b> ENS name can be <a href="https://ens.domains/" target="out">resolved online</a> to
    check the address <b>0xa59b29d7dbc9794d1e7f45123c48b2b8d0a34636</b> above - can also be checked via the smart contract call 'get_ngo_address'.
    <br />
    Withdrawals will happen on a regular basis depending on the number of bought NFTrees.

    <h2>Connect your Metamask</h2>
    Install <a href="https://metamask.io/" target="out">Metamask</a> then ... <button class="getAccountButton">Connect!</button> <label id="selectedAccount"></label>

    <h2>How much is a tree?</h2>
    Each tree is indexed from 0 to 9999.
    The formula is given by: <b>(index-of-tree + 1) * 0.00005 ETH </b> <br />
    <ul>
        <li>First tree is 0.00005 ETH (~ USD 0.12)</li>
        <li>Tree at index 1 costs 0.0001 ETH (~ USD 0.24)</li>
        <li>Tree at index 9 costs 0.00045 ETH (~ USD 1.07)</li>
        <li>Tree at index 9999 costs 0.49995 ETH (~ USD 1190)</li>
    </ul>

    <h2>Is my tree unique?</h2>
    Yes. Each generated image has a unique hash. Trees could differ by one pixel, but each one is <b>unique</b>.

    <h2>Undig my tree</h2>
    Enter a value between 0 and 9999: <input type="text" id="treeindex" size="5" name="fname">
    <button onclick="displayTree()">Undig my tree</button>
    <br />
    <div id="selected-tree"></div>

    <h2>Buy now</h2>
    <p><span id="mmi_detected"></span></p>
    <button class="currentIndexButton">Click for current index: </button> <label id="currentIndexLabel"></label>
    <br /><br />
    <button class="buyYourTreeButton">Buy your tree!</button>
    <br /><br />
    Once bought, check Metamask for the transaction on chain, then head to <a href="https://opensea.io/" target="out">OpenSea</a>!

    <h2>All those could be yours</h2>
    <button class="t2000">First 2000s</button>
    <button class="t4000">2000 to 4000</button>
    <button class="t6000">4000 to 6000</button>
    <button class="t8000">6000 to 8000</button>
    <button class="t10000">8000 to 10000</button>

    <div id="all-trees-table"></div>

    <h2>References</h2>
    <ul>
        <li><a href="https://en.wikipedia.org/wiki/L-system" target="out">L-System</a></li>
        <li><a href="https://developer.mozilla.org/en-US/docs/Web/SVG" target="out">SVG</a></li>
        <li><a href="https://docs.openzeppelin.com/contracts/4.x/erc721" target="out">ERC-721</a></li>
        <li><a href="https://lp.unicef.fr/donate-in-cryptocurrencies-addresses/" target="out">UNICEF</a></li>
    </ul>

    <script>
        const contract_address = '0xd5c8b72ce5f9b7d03d29f14b3802fcc1d4f06968';

        const abi = [
            {
                "inputs": [],
                "name": "purchase_tree",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "index",
                        "type": "uint256"
                    }
                ],
                "name": "get_tree",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "svg",
                        "type": "string"
                    }
                ],
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "counter",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ];

        const getCurrentIndexButton = document.querySelector('.currentIndexButton');
        getCurrentIndexButton.addEventListener('click', () => {
            getIndex();
        });

        async function getIndex() {
            const provider = new ethers.providers.Web3Provider(window.ethereum);
            const signer = provider.getSigner();
            const contract = new ethers.Contract(contract_address, abi, signer);
            const current_index = await contract.counter();
            const cost = (current_index + 1) / 20000;
            document.getElementById('currentIndexLabel').innerHTML = current_index + " (" + cost + " ETH to buy that tree + network fees)";
        }

        const detectMetamask = async () => {
            console.log("Detecting MM");
            if (typeof window.ethereum !== 'undefined') {
            } else {
                document.getElementById("mmi_detected").innerText = "Please install the Metamask plugin";
            }
        }

        detectMetamask();

        const getETHAccountButton = document.querySelector('.getAccountButton');
        getETHAccountButton.addEventListener('click', () => {
            getETHAccount();
        });

        async function getETHAccount() {
            accounts = await ethereum.request({ method: 'eth_requestAccounts' });
            console.log("Selected account: ", accounts[0]);
            document.getElementById('selectedAccount').innerHTML = accounts[0];
        }

        window.ethereum.on('chainChanged', (_chainId) => {
            window.location.reload();
        });

        const t2000Button = document.querySelector('.t2000');
        t2000Button.addEventListener('click', () => {
            allAllTrees(0);
        });
        const t4000Button = document.querySelector('.t4000');
        t4000Button.addEventListener('click', () => {
            allAllTrees(2000);
        });
        const t6000Button = document.querySelector('.t6000');
        t6000Button.addEventListener('click', () => {
            allAllTrees(4000);
        });
        const t8000Button = document.querySelector('.t8000');
        t8000Button.addEventListener('click', () => {
            allAllTrees(6000);
        });
        const t10000Button = document.querySelector('.t10000');
        t10000Button.addEventListener('click', () => {
            allAllTrees(8000);
        });

        function allAllTrees(index) {
            const myTableDiv = document.getElementById("all-trees-table");
            myTableDiv.replaceChildren();
            const table = document.createElement('TABLE');
            table.border = '1';

            const tableBody = document.createElement('TBODY');
            table.appendChild(tableBody);

            for (var i = 0; i < 50; i++) {
                var tr = document.createElement('TR');
                tableBody.appendChild(tr);

                for (var j = 0; j < 40; j++) {
                    var td = document.createElement('TD');
                    var tree = document.createElement("img");
                    tree.src = './trees/tree-' + index + '.svg';
                    console.log("Displaying tree index", index);
                    tree.width = 24;
                    tree.height = 24;
                    tree.title = 'tree-' + index;
                    td.appendChild(tree);
                    tr.appendChild(td);
                    index++;
                }
            }

            myTableDiv.appendChild(table);

            console.log("Number of trees", index);
        }

        // allAllTrees();

        const buyYourTreeButton = document.querySelector('.buyYourTreeButton');
        buyYourTreeButton.addEventListener('click', () => {
            async function buyTree() {
                const amount = '0x16345785D8A0000';
                const sender = accounts[0];

                console.log("from", sender, "contract_address", contract_address, "for", amount);

                const provider = new ethers.providers.Web3Provider(window.ethereum);
                const signer = provider.getSigner();
                const contract = new ethers.Contract(contract_address, abi, signer);

                const current_index = await contract.counter();
                const eth_cost = ((current_index + 1) / 20000).toString();
                console.log("eth_cost", eth_cost);

                const options = { value: ethers.utils.parseEther(eth_cost) }
                const tree_index = await contract.purchase_tree(options);
                console.log("tree_index", tree_index);
            };

            buyTree();
        });

        async function _displayTree(index) {
            const provider = new ethers.providers.Web3Provider(window.ethereum);
            const signer = provider.getSigner();
            const contract = new ethers.Contract(contract_address, abi, signer);
            const tree_as_svg = await contract.get_tree(index);
            console.log("tree_as_svg", tree_as_svg);

            var container = document.getElementById("selected-tree");
            container.innerHTML = tree_as_svg;
        };

        function displayTree() {
            var index = document.getElementById("treeindex").value;
            console.log("displayTree", index);
            _displayTree(index);
        }
    </script>

</body>

</html>